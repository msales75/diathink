Next:
----

OK Hide handle images when in drop-mode
OK Drag-hover over handle for expand/reduce
OK Cleanup theme changes for list-finalization
OK Test outline-validator
OK Add validation for z-index, overflow-handling & corners, expanded-classes
OK Fixup z-index/overflow handling
OK Basic test on Firefox/IE
OK Cleanup redundant code in action-list
OK Fix 'input' selector for focusing in actions
OK Why is the outline not showing up without error-messages?
OK Finish adding/testing item-selectors for old parent/rank with move actions
OK Fix overflow/z-index manual adjustments for dragging
OK Draw border around dragged target
OK Fix ui-focus-parent class-removal
OK Make all elements available for drop-into

* Support undo for all changes

* Add shift-tab keyboard-command
* Add line-split and line-merge for return/backspace

* Keep drag-icon for dragged element
* Connect drop-line-hover with parent-drop-into icon & border
* Connect drop-into-icon-hover with staggered line into target-location
* Add docking animation for drop or revert
* Add docking-preview animation for long hovers
* Expand/contract animation
* Expand/contract preview for hover
* Undo-helper animations
* Test on mobile
* Support multi-line text per draggable-line

* Write a functional test for a sequence of actions that test all action code branches
* ?nestedsortable test?

? Multi-line-selections

 Add a second pane / dual-pages with same outline
 -- get cross-dropping/containers working in nestedsortable
 Support Focusing with breadcrumbs


 Local Search (store word-pointers in 512M RAM?)
 Local Saving
 References:
   How to access reverse-references
     Two-panel references
   Dragging can:
     Creates reference to original (normal across panes)
     Moves original (normal within panes)
   Click can:
     Preview contracted-children to right
     Edit text, when there are no children, or expanded

   switching original with reference
   conversation-area with reply-references


 Printing

Reverse-references
Dual-pane reverse-reference view
  children mixed with reverse-references?
Button to turn line into template (select type, optional guess)
 (Or each list item?)
Actions for creating/editing/deleting records via drag/drop?
Line->Template drag/drop import
Recursive view for fields, filters & sorts
Line-condensing for tables
Recursive views have constrained editing
Search shows objects/counts separately ("and 17 other cases")
Google-search categorizes pages about this object


 Record profiling logs (support replay?)
 Local/Remote Search (5-25 search-terms per line?)
 ? Finish Raw History management



? Use Status parameters for model and view updates

OK Enable drop-into box
OK Make helper translucent; z-index confusion
OK Add icon for drop-into box
OK Migrate css to stylesheet-classes (.dropborder, .droparrow)
OK Re-enable .drop-mode

OK: move some of nestedsortable inside for fine-grained
    action-queueing (UI-transitions and mouse-moves)
OK Watch DOM modifications done by mousedrag
OK Move most modifications into mouseup via 'stop'

OK Override jquery-mobile CSS to make it passable with and without helpers
OK   Find classes responsible for borders
OK   Hide borders when unselected
OK   Reduce line-height
OK   Position boxes above/below


DONE Include the outline-master-parent in the view-list for each model-node?
DONE   and a list of views to update?
DONE  Also need to have controllers linked with view-rootID
DONE Immediate goal: modify view to add/remove/indent lines
DONE   get changes working when calling model-object for changes.
   (can increase localstorage to 50M hmm...)
   (images/attachments are the problem)


 Later enable ReferenceList to work as a list of references

 Later: UI helpers vs. actions (optimization/refactoring issue)
 Modify model too



DONE Enable text-commands for new lines etc.
* Local/Remote Save
* References
* Tags & Triggers
* Real-time collaboration
* History merging with issue-recording
* UI for browsing merge-issues

* Partial view-display
* Partial local-loading
* Action-Queue prioritization
* Partial loading
* Index history by User/Time/Parent-list of affected nodes
* Clone, Sync, Remaster buttons


 Tags have a trigger-object with methods triggered by:
   outlineObject.addTrigger({
     sequence: negative to test, positive to finalize
     'tag-added', 'tag-removed', 'tag-moved',
     'moved'
     'move-sort',
   'change-parent',...}, function(action, object, rank) {
     this points to old model-object,
     this.obj points to view-object
     this.parent, this.rank, this.next, this.previous,
     this.children[],
     this.references[], this.tags[],
     this.referencedBy[], taggedBy[]
     this.tagUI = ViewObject
     (can schedule until after finalized,
       or can return to disallow action)
     tags may define UI for how child-tags appear
      (what about children by reference?)
 });

For synchronizing old remote changes into timeline,
  later need to identify commuting edit-rules,
  (to minimize need to undo/redo user's own changes).

 Do we need to deal with data-binding for the outline?
 (Only for components within each box,
   move/sort handled by one bound controller per outline)

 Write validators for Object-ID's and timestamps, and enumearted
  Write undo/redo functions for history
  TODO: how to handle a parent, reference-target, or tag-target being deleted?
    - Recursively trigger deletion, but normally disallowed in UI
    inverse references/tags storage?

  How are triggers bound to objects?
    - managed through tags
  Source and target-triggers should be enumerated in each instantiated object.
  (Though storage might use query-rules?)

  Mouse loses drag-item when moving last child out of a parent
  (Are the old ones contracted or expanded when removed?)

  Create Model scaffold for outline:
   operations to model/DOM



getTriggers()
getRequiredResources()
getChangedResources()

Queue-structure:
  Action
  Priority-type
  Dependencies
  Resources-accessed [ID:field:ID]
  Resources-changed [ID:field:ID]

Action-types:
  User-Feedback
  User-Model-change
  User-View-change
  User-View-transition
  User-Triggered-Model-change
  User-Triggered-View-change
  User-Triggered-change
  Local-syncing-
  ...

Add global-variables:
 * known-data
 * current-view/data
Add hook for view-change

LATER:
 Modify model/listview to support unknown ranges
 Data-syncs support unknown ranges
 Function for determining load/sync-content
   - given known-data & visible-content


  Queueing:
    Urgent; freeze all others:
      Interactive-feedback
      Model-action-change
      View-model-change
      Notice-logging
    Urgent but skippable:
      Animation-frame
    Background (but triggered model-changes need
          to be finished to test for cosntraints?):
    Triggered-model-change (high but background - if no violation)
      (maybe tag children, check for tag constraint?)
    Triggered-view-change (high but background - if no violation)
    Mark lines queued by triggers?

      Remote-model-change (background)
      Remote-view-change (background?)
      Local Syncing-log (background?)
      Local-syncing-triggered/implied (background?)
      Remote Syncing-log (background?)
      Remote-syncing-triggered/implied (background?)


  It appears to be retaining information from prior location.
    Inspect parentItem.after() command and/or force visibility and/or clone object?

  Change margins on empty ul-elements

  Make text editable, with special meaning to return, backspace, tab, space.
  Highlight available drop-locations
  Make leaf-handles into drop-targets for inside
  Make branch-handles into open/close-targets for hovering

  TEST on mobile!

  Double click focuses-to-top
  Add title-bar with breadcrumbs
  Drag to right
  Saving

  Hide some of the borders?

  ? Should we continue to require contentBinding for lists?
  Coming up:
    Search
    Horizontal swipe
    Inbox, Favorites
    References

    Make lists/selections selectable
    Performance
    Actions, Undo

Issues/todo:

 OK Connect model-ID's with list-views
 OK Extend Backbone.(relational?)Model to add/remove views to each model-item
 OK Test whether __meta works in prototype as expected, before modifying code.
 OK Get files separated out of main.js
 OK Find differences from previous git-commit.
 OK Determine source of model-ID's
 OK Need import-json for model
 OK Choose ID's randomly: cid, id
  DONE: ul's are not hidden after having the last li-item moved out.
  DONE: Change cursor outside of handle (remove button-class?)
  DONE: Add handle on left to drag
  DONE: - add an element inside the list-item-view
  DONE: move handle into tolerance-element div
  DONE: Add expand/collapse buttons
 DONE: Diagnose weird drag-targeting behavior (may also be tied to jquery-mobile theme)
 DONE:   It seems possible to drag li directly inside of li without a ul above it.
DONE  Restyle list after moving
DONE    Find right spot(s) to call ListView.themeUpdate()
DONE    Also call it for the source-location
DONE: Override jquery-mobile listview widget?
DONE:  Hide open-button on right
DONE: Expand sublist CSS to fill right

  DONE Adjust code to permit multi-layered toleranceElement
DONE Get ListView and ListItemView working nested.
DONE Need to define controller for ListView inside ListItemView at correct time
  DONE Only call renderUpdate for sublists when rendering list-item templates.
  DONE Search deeper than one level for sublists - like clone.
  DONE How are event-handlers getting propogated to nested lists - (they're
not)
  DONE Is event-handler propogating to children; why is pageshow getting propogated inward?
  DONE A single controller must identify what is selected among list-outlines.
   Examine pattern of controller-calls when event is fired.
    - set breakpoint inside event-call function (generally useful for debugging)
    ui.js 

Later:
  Need content-binding & event-delegation to work for nested view/controller/model
     elements with the same setup-parameters,
     going to the corresponding model sub-object based on the view nesting.
 -- start with one single content-binding for list/outline
    then add support for binding sub-models inside the list/outline model?
    This is ok when content-changes start from DOM (we know what part to update)
    Harder when change comes from external-database via model content-binding 
      -- probably not needed for one-user text & sort

list.js renderListItemView and cloneObject may need to be changed.
Non-lists would be rendered right here: that.addItem(obj.render());
Call renderUpdate() afterward to render list items?
  But renderUpdate doesn't propogate to lists inside the list-item.
  Make sure renderUpdate propogates - this may affect multiple widgets.

Later: handle updating bound-list content

* Get nestedSortable working on top of ListItems
* Trigger ListView update to/from nestedSortable moves, in up to two lists.

Outline Drag with handle
Notice-message-slider at top
Text edit
Expand/Collapse
Focus button
Multi-page display/swipe
Search-slider
Vertical scrolling
Adjacent & Inbox drag-targets
Search-drag/page
Reference node display
Reference page display
Reference page focus
Toggle drag-to-move vs. reference
Cleanup outline-targets

Home/inbox/preferences?
Undo/Redo
Localstorage

Backend:
---------
Action-log
Search
Autocomplete
Contextual search
Share/Sync
Import/export
  Gmail, Google-docs, Chrome-extension, Evernote
Allocate disk space

Flag for move-original-node on drag/drop?
Preview on click; edit-name/tags on double-click

How does tag-selection UI work?
  Triggers & Inheritance-rules?

Tags can permit/open-up others, or bring to top list?
Different than references, because they are common/numerous?
Text or Nodes?

Are tags text or nodes in a list?
  (probably nodes)
Do some tags permit open-up others?
Tag-management is progammatic?

Later:    
-------------
Long partial lists
Smart-background-loading (start with empty hooks)
Smart-queueing
OS attachment drag/drop
Image cropping/tuning
Indexing & OCR (Html, MS Word, PDF, Google-docs, Image-OCR)

Status, Schedule, Delegation (dependency as subtask?)
Statuses could just be reference-lists with a special UI? 
 (unfiled/someday/later/soon/now/issue/wait-for/wait-until/completed/scheduled-event)

* Node title/shortname automatic before colon (used for paths and abbreviations)

Is ownership a tag?

UI for 
  * making a new tag 
  * making an existing node into a tag 
  * adding/removing tags to nodes 
  * adding/removing filters 
  * editing tag-triggers & constraints
   - trigger from tag-change
   - trigger from delegation
   - trigger from 
  * Adding css-styles based on tags (color; completed)

Distinct from predicated references (0 vs. 1 argument)


- Tags should be nodes, but might have syntax-constraint on content.
  (might also impose uniqueness constraint on tag-text)
  
- Save Search-results vs. Save Search-filter
- Put node-references into 'tags' lists
- Triggers built into tags or items
** Special ui for selecting tags
** UI for defining tag-triggers
- Select sane defaults; let advanced users override
  resolved; today/inbox; switch-on-date; switch-on-reply; switch-on-completion
  today, inbox;  later, completed
* Distinguish Revisit-someday vs. Archived-for-search-only

comment-flow:
issue-flow:
task-flow:
delegation-flow:
due-date-flow:
appointment-flow:
subtask-flow:

- Reference-parents can be shown as a quick-tag; UI for changing quick-tags
- Change-tags-on-date  (common notification-profiles)
- Change-tags-on-dependency (tag-change)
- Change tags on reply from user (edit or reference-change)
- Should be easy to add/remove tags, and to change them and save and/or filters for them, and to support date/trigger logic 

 - optional verb for references for fancier predicates (permits database/spreadsheets)

 - Filter for tags? (#today #soon #later #issue #someday) and (@mark @john)
   type? comment/issue/reference
   bug,issue,feature,story

   (Same-list is 'or', different lists are 'and')
 - How to save searches; setup homepage?
 - Browse by calendar (outline ok)

    - ? Tag-filters for node-types? Not everything's a task?
 - multiple-parent search is fine

 used-for-x and contains-part-y (advanced search; multiple parents)


Special outline of tags: #status @person


Profile & friends


Comment-view: very different UI
  shows children and reference-chains as conversation-threads?
Optional-verb for references?
Browse reverse-references as parents?
Notices?
Friends?

Spreadsheet interface (from tagged properties)
2D-UI design (from outline structure?)

